<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
	xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_0.xsd"
	version="2.1">

	<named-native-query name="ProPurchase.findAllWithProduct">
		<query>
			SELECT pd.product_name, pu.*
			FROM pro_purchases pu, pro_products pd WHERE 
			pd.product_id = pu.product_id
		</query>
	</named-native-query>
	<named-native-query
		name="ProManufacture.findAllWithProduct">
		<query>
			SELECT pd.product_name, manuf.* 
			FROM pro_manufactures manuf, pro_products pd 
			WHERE pd.product_id = manuf.product_id
		</query>
	</named-native-query>
	<named-native-query
		name="findProductPurchaseQuantity">
		<query>
			SELECT 
			    pur.purchase_id AS purchase_id, 
			    pur.product_id AS product_id,
			    sum(pmm.in_quantity) AS in_quantity, 
			    coalesce(sum(out_quantity), 0) AS out_quantity 
			FROM pro_purchases pur, pro_purchase_manufacture_map pmm
			WHERE pur.product_id = pmm.product_id
			AND pur.purchase_id = pmm.purchase_id
			AND pur.is_consumed = 'N'
			AND pur.product_id IN(:bindProducts)
			GROUP BY pur.purchase_id, pur.product_id
		</query>
	</named-native-query>
	<named-native-query
		name="findProductPurchaseManufCostQty">
		<query>
			SELECT 
			    pur.purchase_id AS purchase_id,
			    pur.product_id AS product_id,
			    pur.purchase_quantity AS purchase_quantity,
			    pur.amount_before_tax AS amount_before_tax,
			    pur.gst_amount AS gst_amount,
			    pur.discount_amount AS discount_amount,
			    pur.payable_amount AS payable_amount,
			    stock.manufacture_quantity AS manufacture_quantity
			    FROM pro_purchases pur,
			    pro_stocks stock,
			    pro_manufactures manuf,
			    pro_manufacture_product_map pmm
		    WHERE stock.product_id = pur.product_id
		    AND stock.purchase_id = pur.purchase_id
		    AND stock.manufacture_id = manuf.manufacture_id
		    AND pmm.manufacture_id = stock.manufacture_id
		    AND pmm.product_id = stock.product_id
		    AND pmm.manufacture_id = manuf.manufacture_id
		    AND stock.purchase_quantity IS NULL
		    AND manuf.manufacture_id IN(:bindManufactureIds)
		</query>
	</named-native-query>
	<named-native-query name="findPurchaseInQty">
		<query>
			SELECT pmm.* FROM  pro_purchases pur, pro_purchase_manufacture_map pmm
			WHERE pur.purchase_id = pmm.purchase_id
			AND pur.product_id = pmm.product_id
			AND pmm.in_quantity IS NOT null
			AND pmm.out_quantity IS null
			AND pur.purchase_id = :bindPurchaseId
		</query>
	</named-native-query>
	<named-native-query name="findManufactureOutQty">
		<query>
			SELECT pmm.* FROM  pro_purchases pur, pro_purchase_manufacture_map pmm
			WHERE pur.purchase_id = pmm.purchase_id
			AND pur.product_id = pmm.product_id
			AND pmm.out_quantity IS NOT null
			AND pmm.in_quantity IS null
			AND pur.purchase_id = :bindPurchaseId
		</query>
	</named-native-query>
	<named-native-query name="findStockQuantity">
		<query>
			SELECT 
			    pur.purchase_id AS purchase_id, 
			    pur.product_id AS product_id,
			    sum(stock.purchase_quantity) AS purchase_quantity, 
			    coalesce(sum(stock.manufacture_quantity), 0) AS manufacture_quantity, 
			    coalesce(sum(stock.sell_quantity), 0) AS sell_quantity
			FROM pro_purchases pur, pro_stocks stock
			WHERE pur.product_id = stock.product_id
			AND pur.purchase_id = stock.purchase_id
			AND pur.is_consumed = 'N'
			AND pur.product_id IN(:bindProducts)
			GROUP BY pur.purchase_id, pur.product_id
		</query>
	</named-native-query>
	<named-native-query name="populateDashboardView">
		<query>
			SELECT
				(SELECT COUNT(*) FROM pro_customers) customer_count,
				(SELECT COUNT(*) FROM pro_products) product_count,
				(SELECT COUNT(*) FROM pro_sells) sell_count,
				(SELECT COUNT(*) FROM (
				  SELECT * from pro_purchases pur, pro_products prod
				  WHERE pur.product_id = prod.product_id AND pur.is_consumed = 'N'
				  GROUP BY prod.product_id) ) available_product
		</query>
	</named-native-query>
	<named-native-query name="findPurManufCostData">
		<query>
SELECT
	dataset1.purchase_amount,
	CASE WHEN
		dataset1.purchase_month IS NULL
		THEN dataset2.manufacture_month
		ELSE dataset1.purchase_month END AS purchase_month,
	CASE WHEN
		dataset1.purchase_year IS NULL
		THEN dataset2.manufacture_year
		ELSE dataset1.purchase_year END AS purchase_year,
	dataset2.manufacture_cost,
	CASE when
		dataset2.manufacture_month IS NULL
		THEN dataset1.purchase_month
		ELSE dataset2.manufacture_month END AS manufacture_month,
	CASE when
		dataset2.manufacture_year IS null
		THEN dataset1.purchase_year
		ELSE dataset2.manufacture_year END AS manufacture_year
FROM
	(SELECT
	sum(pur.payable_amount) purchase_amount,
	strftime('%m', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_month,
	strftime('%Y', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_year
	FROM pro_purchases pur GROUP BY purchase_year,purchase_month) AS dataset1
	LEFT OUTER JOIN
	(SELECT
	sum(manuf.manufacture_cost) manufacture_cost,
	strftime('%m', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_month,
	strftime('%Y', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_year
	FROM pro_manufactures manuf GROUP BY manufacture_year,manufacture_month) AS dataset2
	ON dataset1.purchase_month = dataset2.manufacture_month
	AND dataset1.purchase_year = dataset2.manufacture_year

UNION

SELECT
	dataset1.purchase_amount,
	CASE WHEN
		dataset1.purchase_month IS NULL
		THEN dataset2.manufacture_month
		ELSE dataset1.purchase_month END AS purchase_month,
	CASE WHEN
		dataset1.purchase_year IS NULL
		THEN dataset2.manufacture_year
		ELSE dataset1.purchase_year END AS purchase_year,
	dataset2.manufacture_cost,
	CASE when
		dataset2.manufacture_month IS NULL
		THEN dataset1.purchase_month
		ELSE dataset2.manufacture_month END AS manufacture_month,
	CASE when
		dataset2.manufacture_year IS null
		THEN dataset1.purchase_year
		ELSE dataset2.manufacture_year END AS manufacture_year
FROM
	(SELECT
	sum(manuf.manufacture_cost) manufacture_cost,
	strftime('%m', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_month,
	strftime('%Y', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_year
	FROM pro_manufactures manuf GROUP BY manufacture_year,manufacture_month ) AS dataset2
	LEFT OUTER JOIN
	(SELECT
	sum(pur.payable_amount) purchase_amount,
	strftime('%m', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_month,
	strftime('%Y', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_year
	FROM pro_purchases pur GROUP BY purchase_year,purchase_month ) AS dataset1
	ON dataset1.purchase_month = dataset2.manufacture_month
	AND dataset1.purchase_year = dataset2.manufacture_year

ORDER BY purchase_year asc, purchase_month ASC
		</query>
	</named-native-query>
		<named-native-query name="findPurSellCostData">
		<query>
SELECT
	dataset1.purchase_amount,
	CASE WHEN
		dataset1.purchase_month IS NULL
		THEN dataset2.sell_month
		ELSE dataset1.purchase_month END AS purchase_month,
	CASE WHEN
		dataset1.purchase_year IS NULL
		THEN dataset2.sell_year
		ELSE dataset1.purchase_year END AS purchase_year,
	dataset2.sell_cost,
		CASE when
		dataset2.sell_month IS NULL
		THEN dataset1.purchase_month
		ELSE dataset2.sell_month END AS sell_month,
	CASE when
		dataset2.sell_year IS null
		THEN dataset1.purchase_year
		ELSE dataset2.sell_year END AS sell_year
FROM
	(SELECT
	sum(pur.payable_amount) purchase_amount,
	strftime('%m', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_month,
	strftime('%Y', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_year
	FROM pro_purchases pur GROUP BY purchase_year,purchase_month) AS dataset1
	LEFT OUTER JOIN
	(SELECT
	sum(sell.sell_cost) sell_cost,
	strftime('%m', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_month,
	strftime('%Y', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_year
	FROM pro_sells sell GROUP BY sell_year,sell_month) AS dataset2
	ON dataset1.purchase_month = dataset2.sell_month
	AND dataset1.purchase_year = dataset2.sell_year

UNION

SELECT
	dataset1.purchase_amount,
	CASE WHEN
		dataset1.purchase_month IS NULL
		THEN dataset2.sell_month
		ELSE dataset1.purchase_month END AS purchase_month,
	CASE WHEN
		dataset1.purchase_year IS NULL
		THEN dataset2.sell_year
		ELSE dataset1.purchase_year END AS purchase_year,
	dataset2.sell_cost,
	CASE when
		dataset2.sell_month IS NULL
		THEN dataset1.purchase_month
		ELSE dataset2.sell_month END AS sell_month,
	CASE when
		dataset2.sell_year IS null
		THEN dataset1.purchase_year
		ELSE dataset2.sell_year END AS sell_year
FROM
	(SELECT
	sum(sell.sell_cost) sell_cost,
	strftime('%m', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_month,
	strftime('%Y', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_year
	FROM pro_sells sell GROUP BY sell_year,sell_month ) AS dataset2
	LEFT OUTER JOIN
	(SELECT
	sum(pur.payable_amount) purchase_amount,
	strftime('%m', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_month,
	strftime('%Y', datetime(pur.purchase_date/1000, 'unixepoch')) AS purchase_year
	FROM pro_purchases pur GROUP BY purchase_year,purchase_month ) AS dataset1
	ON dataset1.purchase_month = dataset2.sell_month
	AND dataset1.purchase_year = dataset2.sell_year

ORDER BY purchase_year asc, purchase_month ASC
		</query>
	</named-native-query>
	<named-native-query name="findManufSellCostData">
		<query>
SELECT
	dataset1.manufacture_cost,
	CASE WHEN
		dataset1.manufacture_month IS NULL
		THEN dataset2.sell_month
		ELSE dataset1.manufacture_month END AS manufacture_month,
	CASE WHEN
		dataset1.manufacture_year IS NULL
		THEN dataset2.sell_year
		ELSE dataset1.manufacture_year END AS manufacture_year,
	dataset2.sell_cost,
	CASE when
		dataset2.sell_month IS NULL
		THEN dataset1.manufacture_month
		ELSE dataset2.sell_month END AS sell_month,
	CASE when
		dataset2.sell_year IS null
		THEN dataset1.manufacture_year
		ELSE dataset2.sell_year END AS sell_year
FROM
	(SELECT
	sum(manuf.manufacture_cost) manufacture_cost,
	strftime('%m', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_month,
	strftime('%Y', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_year
	FROM pro_manufactures manuf GROUP BY manufacture_year,manufacture_month) AS dataset1
	LEFT OUTER JOIN
	(SELECT
	sum(sell.sell_cost) sell_cost,
	strftime('%m', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_month,
	strftime('%Y', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_year
	FROM pro_sells sell GROUP BY sell_year,sell_month) AS dataset2
	ON dataset1.manufacture_month = dataset2.sell_month
	AND dataset1.manufacture_year = dataset2.sell_year

UNION

	SELECT
	dataset1.manufacture_cost,
	CASE WHEN
		dataset1.manufacture_month IS NULL
		THEN dataset2.sell_month
		ELSE dataset1.manufacture_month END AS manufacture_month,
	CASE WHEN
		dataset1.manufacture_year IS NULL
		THEN dataset2.sell_year
		ELSE dataset1.manufacture_year END AS manufacture_year,
	dataset2.sell_cost,
	CASE when
		dataset2.sell_month IS NULL
		THEN dataset1.manufacture_month
		ELSE dataset2.sell_month END AS sell_month,
	CASE when
		dataset2.sell_year IS null
		THEN dataset1.manufacture_year
		ELSE dataset2.sell_year END AS sell_year
FROM
	(SELECT
	sum(sell.sell_cost) sell_cost,
	strftime('%m', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_month,
	strftime('%Y', datetime(sell.sell_date/1000, 'unixepoch')) AS sell_year
	FROM pro_sells sell GROUP BY sell_year,sell_month ) AS dataset2
	LEFT OUTER JOIN
	(SELECT
	sum(manuf.manufacture_cost) manufacture_cost,
	strftime('%m', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_month,
	strftime('%Y', datetime(manuf.manufacture_date/1000, 'unixepoch')) AS manufacture_year
	FROM pro_manufactures manuf GROUP BY manufacture_year,manufacture_month ) AS dataset1
	ON dataset1.manufacture_month = dataset2.sell_month
	AND dataset1.manufacture_year = dataset2.sell_year

ORDER BY manufacture_year asc, manufacture_month ASC
		</query>
	</named-native-query>
	<named-native-query name="findTotalCostSummary">
		<query>
SELECT *FROM 
	(
		SELECT coalesce(sum(pur.payable_amount), 0) AS purchase_amount 
		FROM pro_purchases pur
	),
	(
		SELECT coalesce(sum(manuf.manufacture_cost), 0) AS manufacture_cost
		FROM pro_manufactures AS manuf
	),
	(
		SELECT coalesce(sum(sell.sell_cost), 0) AS sell_cost
		FROM pro_sells AS sell
	)
		</query>
	</named-native-query>
</entity-mappings>